// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using ProjetImmo.Core.DataAccess;
using ProjetImmo.Core.Models.Enums;
using System;

namespace ProjetImmo.Core.Migrations
{
    [DbContext(typeof(AgencyDbContext))]
    [Migration("20180313145021_Initial_Migration")]
    partial class Initial_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("ProjetImmo.Core.Models.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("PostalAddress");

                    b.Property<string>("ZIP");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.Estate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressID");

                    b.Property<double>("AnnualCharges");

                    b.Property<int>("FloorCount");

                    b.Property<int>("FloorNumber");

                    b.Property<int?>("OwnerID");

                    b.Property<double>("PropertyTax");

                    b.Property<int?>("ReferentID");

                    b.Property<int>("RoomsCount");

                    b.Property<double>("Surface");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("OwnerID");

                    b.HasIndex("ReferentID");

                    b.ToTable("Estate");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.EstateKeyword", b =>
                {
                    b.Property<int>("EstateID");

                    b.Property<int>("KeywordID");

                    b.HasKey("EstateID", "KeywordID");

                    b.HasIndex("KeywordID");

                    b.ToTable("EstateKeyword");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.Keyword", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Keyword");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressID");

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.Picture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte>("Base64");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("RelatedEstateID");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("RelatedEstateID");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("Fees");

                    b.Property<double>("Price");

                    b.Property<int?>("RelatedCustomerID");

                    b.Property<int?>("RelatedEstateID");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("TransactionDate");

                    b.HasKey("ID");

                    b.HasIndex("RelatedCustomerID");

                    b.HasIndex("RelatedEstateID");

                    b.ToTable("Transaction");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.RentalTransaction", b =>
                {
                    b.HasBaseType("ProjetImmo.Core.Models.Transaction");

                    b.Property<bool>("Furnished");

                    b.ToTable("RentalTransaction");

                    b.HasDiscriminator().HasValue("RentalTransaction");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.SaleTransaction", b =>
                {
                    b.HasBaseType("ProjetImmo.Core.Models.Transaction");


                    b.ToTable("SaleTransaction");

                    b.HasDiscriminator().HasValue("SaleTransaction");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.Estate", b =>
                {
                    b.HasOne("ProjetImmo.Core.Models.Address", "Address")
                        .WithMany("AddressedEstates")
                        .HasForeignKey("AddressID");

                    b.HasOne("ProjetImmo.Core.Models.Person", "Owner")
                        .WithMany("OwnedEstates")
                        .HasForeignKey("OwnerID");

                    b.HasOne("ProjetImmo.Core.Models.Person", "Referent")
                        .WithMany("ManagedEstates")
                        .HasForeignKey("ReferentID");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.EstateKeyword", b =>
                {
                    b.HasOne("ProjetImmo.Core.Models.Estate", "Estate")
                        .WithMany("Keywords")
                        .HasForeignKey("EstateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProjetImmo.Core.Models.Keyword", "Keyword")
                        .WithMany("DescribedEstates")
                        .HasForeignKey("KeywordID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.Person", b =>
                {
                    b.HasOne("ProjetImmo.Core.Models.Address", "Address")
                        .WithMany("AddressedPersons")
                        .HasForeignKey("AddressID");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.Picture", b =>
                {
                    b.HasOne("ProjetImmo.Core.Models.Estate", "RelatedEstate")
                        .WithMany("Pictures")
                        .HasForeignKey("RelatedEstateID");
                });

            modelBuilder.Entity("ProjetImmo.Core.Models.Transaction", b =>
                {
                    b.HasOne("ProjetImmo.Core.Models.Person", "RelatedCustomer")
                        .WithMany()
                        .HasForeignKey("RelatedCustomerID");

                    b.HasOne("ProjetImmo.Core.Models.Estate", "RelatedEstate")
                        .WithMany("Transactions")
                        .HasForeignKey("RelatedEstateID");
                });
#pragma warning restore 612, 618
        }
    }
}
